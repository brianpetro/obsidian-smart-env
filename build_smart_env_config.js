#!/usr/bin/env node
/**
 * build_smart_env_config.js
 *
 * Scans ./src for collections, items, and components,
 * generates "dist/smart_env.config.js" with static import statements.
 *
 * Run: `node build_smart_env_config.js`
 */

import fs from 'fs';
import path from 'path';
import { pathToFileURL } from 'url';

export function build_smart_env_config(dist_dir, roots) {
  if (!fs.existsSync(dist_dir)) {
    fs.mkdirSync(dist_dir, { recursive: true });
  }
  const all_collections = {};
  const all_items = {};
  const all_components = {};
  for (const root of roots) {
    const { collections } = scan_collections(root, dist_dir);
    const { items } = scan_items(root, dist_dir);
    const { components } = scan_components(root, dist_dir);
  
    Object.entries(collections).forEach(([name, import_path]) => {
      all_collections[name] = import_path;
    });
  
    Object.entries(items).forEach(([name, details]) => {
      all_items[name] = details;
    });
  
    Object.entries(components).forEach(([name, details]) => {
      all_components[name] = details;
    });
  
  }
  
  const collection_imports = Object.entries(all_collections)
    .map(([name, import_path]) => `import ${name} from '${import_path}';`)
    .join('\n')
  ;
  const collections_config = Object.keys(all_collections)
    .map(name => `    ${name}`)
    .join(',\n')
  ;
  
  const item_imports = Object.entries(all_items)
    .map(([name, {import_var, import_path}]) => `import { ${import_var} } from '${import_path}';`)
    .join('\n')
  ;
  const items_config = Object.entries(all_items)
    .map(([name, {import_var}]) => `    ${import_var}`)
    .join(',\n')
  ;
  
  const component_imports = Object.entries(all_components)
    .map(([name, {import_var, import_path}]) => `import { render as ${import_var} } from '${import_path}';`)
    .join('\n')
  ;
  const components_config = Object.entries(all_components)
    .map(([name, {import_var}]) => `    ${name}: ${import_var}`)
    .join(',\n')
  ;
  
  const config_object = `
  export const smart_env_config = {
    collections: {
  ${collections_config}
    },
    item_types: {
  ${items_config}
    },
    components: {
  ${components_config}
    }
  };
  `;
  
  const final_code = [
    '// AUTO-GENERATED by build_smart_env_config.js. DO NOT EDIT.',
    collection_imports,
    item_imports,
    component_imports,
    config_object
  ].join('\n');
  
  const out_file = path.join(dist_dir, 'smart_env.config.js');
  fs.writeFileSync(out_file, final_code, 'utf-8');
  console.log(`Wrote ${out_file}`);
}
//////////////////////////////////////////////////////////
// Helper methods
//////////////////////////////////////////////////////////

function scan_collections(base_dir, dist_dir) {
  const collections_dir = path.join(base_dir, 'collections');
  if (!fs.existsSync(collections_dir)) return { collections:{}, collections_imports:[] };

  const collections = {};

  for (const file of fs.readdirSync(collections_dir)) {
    if (!file.endsWith('.js')) continue;
    const coll_name = file.replace('.js', '');
    collections[coll_name] = normalize_relative_path(path.join(collections_dir, file), dist_dir);
  }

  return { collections };
}

function scan_items(base_dir, dist_dir) {
  const items_dir = path.join(base_dir, 'items');
  if (!fs.existsSync(items_dir)) return { items:{}, items_imports:[] };

  const items = {};
  const items_imports = [];

  for (const file of fs.readdirSync(items_dir)) {
    if (!file.endsWith('.js')) continue;
    const item_name = file.replace('.js', '');
    const import_var = to_pascal_case(item_name);
    items_imports.push(`import { ${import_var} } from '${normalize_relative_path(path.join(items_dir, file), dist_dir)}';`);
    items[item_name] = {import_var, import_path: normalize_relative_path(path.join(items_dir, file), dist_dir)};
  }

  return { items };
}

function scan_components(base_dir, dist_dir) {
  const components_dir = path.join(base_dir, 'components');
  if (!fs.existsSync(components_dir)) return { components:{}, components_imports:[] };

  const components = {};

  for (const file of fs.readdirSync(components_dir)) {
    if (!file.endsWith('.js')) continue;
    const comp_name = file.replace('.js', '');
    const import_var = `${comp_name}_component`;

    components[comp_name] = {import_var, import_path: normalize_relative_path(path.join(components_dir, file), dist_dir)};
  }

  return { components };
}

function normalize_relative_path(abs_path, dist_dir) {
  let rel = path.relative(dist_dir, abs_path).replace(/\\/g, '/');
  if (!rel.startsWith('.')) rel = './' + rel;
  return rel;
}

function to_pascal_case(name) {
  return name.replace(/(^|_|-)(\w)/g, (_, __, char) => char.toUpperCase());
}

// if run directly, build the config
if (import.meta.url === pathToFileURL(process.argv[1]).href) {
  const call_path = process.cwd();
  let DIST_DIR = path.resolve(call_path, 'dist');
  const arg_roots = process.argv.slice(2).map(arg => path.resolve(process.cwd(), arg));
  const SMART_ENV_ROOTS = [...(arg_roots || []), path.resolve(process.cwd(), 'src')];
  console.log('SMART_ENV_ROOTS', SMART_ENV_ROOTS);
  build_smart_env_config(DIST_DIR, SMART_ENV_ROOTS);
}