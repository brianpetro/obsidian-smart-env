/* eslint-env node */
/* global __dirname */

import fs from 'fs';
import os from 'os';
import path from 'path';
import { pathToFileURL } from 'url';
import test from 'ava';
import { build_smart_env_config } from './build_smart_env_config.js';

/** -------------------------------------------------------------------
 * helpers – snake_case, two-space indent, no extra deps
 * ------------------------------------------------------------------*/
const tmp_root = fs.mkdtempSync(path.join(os.tmpdir(), 'smart-env-test-'));

function write_file(rel, contents = '') {
  const abs = path.join(tmp_root, rel);
  fs.mkdirSync(path.dirname(abs), { recursive: true });
  fs.writeFileSync(abs, contents);
}

function read_generated_config() {
  const p = path.join(tmp_root, 'smart_env.config.js');
  return fs.readFileSync(p, 'utf-8');
}

/** -------------------------------------------------------------------
 * Setup fixture project
 * ------------------------------------------------------------------*/
test.before(() => {
  /* collections */
  write_file('src/collections/notes.js', 'export default class Notes {}');

  /* items */
  write_file('src/items/awesome_block.js', 'export function AwesomeBlock(){}');

  /* components – root level */
  write_file('src/components/env_settings.js', 'export function render(){}');

  /* components – one level */
  write_file('src/components/smart-sources/settings.js', 'export function render(){}');

});

/** -------------------------------------------------------------------
 * build config once for all tests
 * ------------------------------------------------------------------*/
test.before(async () => {
  build_smart_env_config(tmp_root, [path.join(tmp_root, 'src')]);
});

/** -------------------------------------------------------------------
 * Tests
 * ------------------------------------------------------------------*/
test('banner comment exists', t => {
  const file = read_generated_config();
  t.true(file.startsWith('// AUTO-GENERATED by build_smart_env_config.js'));
});

test('collections are gathered', t => {
  const file = read_generated_config();
  t.regex(file, /collections:[\s\S]*notes/);
});

test('items are imported with PascalCase vars', t => {
  const file = read_generated_config();
  t.regex(file, /import { AwesomeBlock } from/);
  t.regex(file, /item_types:[\s\S]*AwesomeBlock/);
});

test('root-level component appears in config', t => {
  const file = read_generated_config();
  t.regex(file, /components:[\s\S]*env_settings:/);
});

test('nested component folder is snake_cased', t => {
  const file = read_generated_config();
  // smart-sources -> smart_sources
  t.regex(file, /smart_sources:[\s\S]*settings:/);
});

test('generated module is importable', async t => {
  /* The dynamic import will execute the generated import stmts.
     Because fixture component/item files exist, it should resolve. */
  const mod_path = path.join(tmp_root, 'smart_env.config.js');
  const cfg = await import(pathToFileURL(mod_path).href);
  t.truthy(cfg.smart_env_config);
  t.truthy(cfg.smart_env_config.components.env_settings);
});

test.after.always(() => {
  fs.rmSync(tmp_root, { recursive: true, force: true });
});
